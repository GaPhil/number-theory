# The Diffie-Hellman key exchange can be broken trivially in (Z/nZ; +)!
print("The Diffie-Hellman key exchange can be broken trivially in (Z/nZ; +)!")
print("We use a safe prime p for (Z/pZ; +), but it works for any (Z/nZ; +).\n")

def rdp(nbits=1024):
    while True:
        p = random_prime(2^nbits-1, false, 2^(nbits-1))
        if ZZ((p-1)/2).is_prime():
            return p

n = rdp()
print("n =", n, "\n")

# Find a generator 1 < g \in (Z/nZ; +)
# Change range to use other generator
for g in range(2, n):
    if gcd(g, n) == 1:
        print("The publicly known generator is:\ng =", g, "\n")
        break

x_a = ZZ.random_element(0, n - 1)
print("Alice chooses x_a from {0,...,n-1}:\nx_a =", x_a, "\n")

A = g * x_a % n
print("Alice sends A = R_n(g * x_a):\nA =", A, "\n")

x_b = ZZ.random_element(0, n - 1)
print("Bob chooses x_b from {0,...,n-1}:\nx_b =", x_b, "\n")

B = g * x_b % n
print("Bob sends B = R_n(g * x_b):\nB =", B, "\n")

print("The shared key k_AB = R_n(g * x_a * x_b):\nk_AB =", g * x_a * x_b % n, "\n")

a = inverse_mod(g, n)
print("g is a generator of (Z/nZ; +) ===> gcd(g, n) = 1")
print("Eve can use the extended euclidean algorithm to find an\na \\in Z : a * g \\cong 1 mod n:\na =", a, "\n")

print("Even can compute the key k using the eavesdropped message A and B.")
print("k_Eve = R_n(a * A * B)\nk_Eve =", a * A * B % n, "\n")

print("Claim:     k_AB\t= R_n(a * A * B)\n")
print("Proof:     k_AB\t= R_n(g * x_A * x_b)\n\t\t= R_n(g * x_a * (a*g) * x_B)\n\t\t= R_n(a * (g*x_a) * (g*x_b))\n\t\t= R_n(a * A * B)\n\t\t= k_Eve")
print("k_AB == k_Eve:", g * x_a * x_b % n == a * A * B % n)



##### An execution of the program:
###
###   The Diffie-Hellman key exchange can be broken trivially in (Z/nZ; +)!
###   We use a safe prime p for (Z/pZ; +), but it works any (Z/nZ; +).
###   
###   n = 156174779570843879041286527762688976083873952739583674465089777720958769217769632954158821596501178399796156940269797401460316475118692122790358834237576283866119106346960165536827079799851285650279329636364064461057249162261671045482450222408485193911339959400118594445330082676956411901486414892040040207513 
###   
###   The publicly known generator is:
###   g = 2 
###   
###   Alice chooses x_a from {0,...,n-1}:
###   x_a = 35495969852083831999059821579073266227892290666091029682951613876011547837947363741844400137348011373755797495323817296716993954180611767060750210537124170437991039955421251282632746876426625087022173626171949408442437471241678370940081331150337385847208851721248178503652836362794767392578832386309312394333 
###   
###   Alice sends A = R_n(g * x_a):
###   A = 70991939704167663998119643158146532455784581332182059365903227752023095675894727483688800274696022747511594990647634593433987908361223534121500421074248340875982079910842502565265493752853250174044347252343898816884874942483356741880162662300674771694417703442496357007305672725589534785157664772618624788666 
###   
###   Bob chooses x_b from {0,...,n-1}:
###   x_b = 138973813029366654386122853785927166383769963645741388938841304812100853034911654485662191060628393844505478275463057911890776379496363040322631524893871874750046453996786154545454541172007807638172485528646951242731392501071736396256841958043564418619169561873820409661673866774551066944722281131324364953264 
###   
###   Bob sends B = R_n(g * x_b):
###   B = 121772846487889429730959179809165356683665974551899103412592831903242936852053676017165560524755609289214799610656318422321236283874033957854904215550167465633973801646612143554082002544164329626065641420929838024405535839881801747031233693678643643326999164347522224878017650872145721987958147370608689699015 
###   
###   The shared key k_AB = R_n(g * x_a * x_b):
###   k_AB = 26249276500189986329332068149252704603396471277259086530055905615376769288440967442591333380724839560290964397375250365757976041692044061880271567977347863579344746730688264268247191808040127456851274948291674289819334623366391772984698253087408860933170075763972803547826816897667097259021422438722415680007 
###   
###   g is a generator of (Z/nZ; +) ===> gcd(g, n) = 1
###   Eve can use the extended euclidean algorithm to find an
###   a \in Z : a * g \cong 1 mod n:
###   a = 78087389785421939520643263881344488041936976369791837232544888860479384608884816477079410798250589199898078470134898700730158237559346061395179417118788141933059553173480082768413539899925642825139664818182032230528624581130835522741225111204242596955669979700059297222665041338478205950743207446020020103757 
###   
###   Even can compute the key k using the eavesdropped message A and B.
###   k_Eve = R_n(a * A * B)
###   k_Eve = 26249276500189986329332068149252704603396471277259086530055905615376769288440967442591333380724839560290964397375250365757976041692044061880271567977347863579344746730688264268247191808040127456851274948291674289819334623366391772984698253087408860933170075763972803547826816897667097259021422438722415680007 
###   
###   Claim:     k_AB = R_n(a * A * B)
###   
###   Proof:     k_AB = R_n(g * x_A * x_b)
###                   = R_n(g * x_a * (a*g) * x_B)
###                   = R_n(a * (g*x_a) * (g*x_b))
###                   = R_n(a * A * B)
###                   = k_Eve
###   k_AB == k_Eve: True
