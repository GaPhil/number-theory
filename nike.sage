from sage.stats.distributions.discrete_gaussian_polynomial import DiscreteGaussianDistributionPolynomialSampler
from numpy import right_shift as rs


# ---> HELPER FUNCTIONS <---

def rdp(nbits=128):
    while True:
        p = random_prime(2 ^ nbits - 1, false, 2 ^ (nbits - 1))
        if ZZ((p - 1) / 2).is_prime():
            return p


def bin_rep(p):
    coefficients = p.list()
    bin = []
    i = 0
    while i < 265:
        coeffbit = rs((coefficients[i]), log(q - 1, 2))
        bin.append(1 if coeffbit == 1 else 0)
        i += 1
    return "".join(map(str, bin))


def sample_poly(ring):
    return ring.random_element()


def sample_error():
    return DiscreteGaussianDistributionPolynomialSampler(R_q, n, sigma)()


# ---> NIKE <---

# Public parameters
q = rdp()                          # modulus
n = 4001                           # dimension
sigma = 6.192                      # width parameter
f(x) = x^n + 1                     # quotient polynomial
Z_q.<x> = PolynomialRing(Zmod(q))  # polynomial ring of integers mod q
R_q.<x> = Z_q.quotient(x^n + 1)    # quotient polynomial ring of integers mod q with modulus x^n + 1

print("q: ", q)
print("R_q[x]: ", R_q)
a = sample_poly(R_q)
print("a: ", bin_rep(a))

# Alice
s_A = sample_error()
e_A = sample_error()
b_A = a * s_A + e_A
print("s_A: ", bin_rep(s_A))
print("e_A: ", bin_rep(e_A))
print("b_A: ", bin_rep(b_A))

# Bob
s_B = sample_error()
e_B = sample_error()
b_B = a * s_B + e_B
print("s_B: ", bin_rep(s_B))
print("e_B: ", bin_rep(e_B))
print("b_B: ", bin_rep(b_B))

# Alice's shared key
k_A = s_A * b_B
print("k_A: ", bin_rep(k_A))

# Bob's shared key
k_B = s_B * b_A
print("k_B: ", bin_rep(k_B))

if bin_rep(k_A) == bin_rep(k_B):
    print("Keys match!")
else:
    print("Keys do NOT match!")


# ---> TEST RUN <---

# q:  178188310787282943654466389945081604067
# R_q[x]:  Univariate Quotient Polynomial Ring in x over Ring of integers modulo 178188310787282943654466389945081604067 with modulus x^4001 + 1
# a:  0000000000000000001000000000000000110000000000000001000000000000000010010000000001000000000010000000000000000000000000000000000000100000000000000000000000100000000000010000000000000000000000000000000000000000000000000000000000000000100000000000000000100000000000000
# s_A:  1110111111001001100010010100000101011001111110010001100000010011000111101110101000010000000010010010000101101011101011101000001010100010111101111010110100101000010110101010111111110000110100111101011100111100101111110100011110011100101010001110000100101100000011101
# e_A:  1010010010100111110010011110110011000011101111111100101111011010000100111110000000010100010010000001010000010110110101110110010101110000001001100001010110011010101001110110000010000111101100110001001100100011111010100001001010101011010010010001001110000010010111100
# b_A:  0000000010000000000000000001000000100000000101000000000100000000000010000000010000000000000000000001000000000000001001010000000000001000001000000000100000000000000000000000000000000000100000000000000000000000000000000000000010000000000000010000000000010000000010000
# s_B:  1100111101101001001100101010011010101000001000111100000010110110010110011110001000011100100111100000111010000101011001011110011111010010000101111101110010100101010010111101010010011110101000001100000011000101001111111110100011101100111101000010011000110110000100000
# e_B:  0111001001000001010101111100100101111000011001100110010001100010010010011011010010001011010100001110000101011011111101111111000101011011000001010000000111111101011010110000111010100011100110111110010010010100001101100001111000100101000011110101001000010111011000111
# b_B:  0000000000000000010000000100010000000000000000001000100000000000000000000000000000000000000000001000000000000000000000000000000000100000001000000100010000000000100000000001000000000000000001000000000000000000000000000000000000000000000001000000000000001000000000000
# k_A:  0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000001000000000000000000000000000000000000100
# k_B:  0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000001000000000000000000000000000000000000100
# Keys match!
