from sage.stats.distributions.discrete_gaussian_polynomial import DiscreteGaussianDistributionPolynomialSampler
from numpy import right_shift as rs


# ---> HELPER FUNCTIONS <---

def rdp(nbits=128):
    while True:
        p = random_prime(2 ^ nbits - 1, false, 2 ^ (nbits - 1))
        if ZZ((p - 1) / 2).is_prime():
            return p


def bin_rep(p):
    coefficients = p.list()
    bin = []
    i = 0
    while i < 256:
        coeffbit = rs((coefficients[i]), log(q - 1, 2))
        bin.append(1 if coeffbit == 1 else 0)
        i += 1
    return "".join(map(str, bin))


def sample_poly(ring):
    return ring.random_element()


def sample_error():
    return DiscreteGaussianDistributionPolynomialSampler(R_q, n, sigma)()


# ---> NIKE <---

# Public parameters
q = rdp()                          # modulus
n = 4001                           # dimension
sigma = 6.192                      # width parameter
f(x) = x^n + 1                     # quotient polynomial
Z_q.<x> = PolynomialRing(Zmod(q))  # polynomial ring of integers mod q
R_q.<x> = Z_q.quotient(x^n + 1)    # quotient polynomial ring of integers mod q with modulus x^n + 1

print("q: ", q)
print("R_q[x]: ", R_q)
a = sample_poly(R_q)
print("a: ", bin_rep(a))

# Alice
s_A = sample_error()
e_A = sample_error()
b_A = a * s_A + e_A
print("s_A: ", bin_rep(s_A))
print("e_A: ", bin_rep(e_A))
print("b_A: ", bin_rep(b_A))

# Bob
s_B = sample_error()
e_B = sample_error()
b_B = a * s_B + e_B
print("s_B: ", bin_rep(s_B))
print("e_B: ", bin_rep(e_B))
print("b_B: ", bin_rep(b_B))

# Alice's shared key
k_A = s_A * b_B
print("k_A: ", bin_rep(k_A))

# Bob's shared key
k_B = s_B * b_A
print("k_B: ", bin_rep(k_B))

if bin_rep(k_A) == bin_rep(k_B):
    print("Keys match!")
else:
    print("Keys do NOT match!")


# ---> TEST RUN <---

# q:  275073179157030348762084093735987791939
# R_q[x]:  Univariate Quotient Polynomial Ring in x over Ring of integers modulo 275073179157030348762084093735987791939 with modulus x^4001 + 1
# a:  1001010001011000010110101111001000010100011001100010100110010010000110000111111000000110001011010000001010010011000001000000110111010011001101110010101111100100100100000011001000000010101001010001011000010100101100011110100101010011100000000000001011111100
# s_A:  0000110011100011110111111001100010010011111101100100111011100001111010001101111010100001010011101001000100001000101000100101100000101011111000111000000101010000111001001101111010110011111110110111001010100101111010111010010011110110100010000001000010010010
# e_A:  1000011010111000101000000001100100010011010101001111011000111111110000111001011101011100011100100011110000011110001000110110100000001011001011111000000101010110101000010010101101001111110000101111000100100010111111001000001001100101101100111111011010010010
# b_A:  0000011011000010100000010000100100100100011111000100101010100111101000101000000000101111101001010011111100000100101010000001100000000101100010000001101101110000000010010111011100001001100001001100100100010010000000000111000101011110110000000011111101000000
# s_B:  0100011011001010111101011011000001100000011000001010001001010111101001000111010110000100110111010101000110010010000010100010100100001001000100110101100000011111100010011101001111010010111100100110101100010111110001011101000001010110000011110010101100000011
# e_B:  1010111100101110010101010110001000010100101000101001010110000100010100001010110000101110001011000111010111101001101000011010100011001110101110100100001100000100001011110001101100100001011100011010101111001111110101010110010101101011011000000100011010110010
# b_B:  0111010100001000100000100100011001110010010000010001001010010000000000100000100011101001110001010011001101111000100010001001100001010000101001010000100110001001100010101000111110101000110101100110010000000000101100001110010000110011001000001001000101101100
# k_A:  0001000100010010101001111011101010111011000000000110011011000010110011100001000011101010011111001000100000100000101100100000010010110101011000100110000100010001111110001010101001010110000110100101100010110100000000010011001110000010110000001000010000001001
# k_B:  0001000100010010101001111011101010111011000000000110011011000010110011100001000011101010011111001000100000100000101100100000010010110101011000100110000100010001111110001010101001010110000110100101100010110100000000010011001110000010110000001000010000001001
# Keys match!
